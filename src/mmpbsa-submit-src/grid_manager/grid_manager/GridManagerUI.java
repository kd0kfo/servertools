/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GridManagerUI.java
 *
 * Created on Aug 23, 2010, 8:16:33 AM
 */

package grid_manager;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.tree.DefaultMutableTreeNode;
import java.util.Vector;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
/**
 *
 * @author dcoss
 */
public class GridManagerUI extends javax.swing.JFrame implements ClipboardOwner{

    public void lostOwnership(Clipboard theClipboard, java.awt.datatransfer.Transferable contents)
    {
        //blah
    }
    
    public static String getVersion()
    {
        String[] version = grid_manager_utils.version;
        return version[0] + "." + version[1] + "." + version[2];
    }

    /** Creates new form GridManagerUI */
    public GridManagerUI() {
        gridNode = null;
        messageCounter = 0;
        computerListModel = new javax.swing.DefaultListModel();
        hostInfos = new java.util.Vector<grid_manager.HostInfo>();
        initComponents();
        taskTree.updateUI();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popTask = new javax.swing.JPopupMenu();
        menuUpdateTask = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        topTask = new DefaultMutableTreeNode(grid_manager_utils.GRID_NAME);
        taskTree = new javax.swing.JTree(topTask);
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtMessages = new javax.swing.JTextArea();
        btnRefreshMsgs = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtInfo = new javax.swing.JTextArea();
        btnExecute = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtCommand = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        computerList = new javax.swing.JList();
        newComputer = new javax.swing.JTextField();
        btnAdd = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnRemove = new javax.swing.JToggleButton();
        txtPort = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtHash = new javax.swing.JPasswordField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();

        popTask.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                popTaskComponentShown(evt);
            }
        });

        menuUpdateTask.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        menuUpdateTask.setText("Update Task List");
        menuUpdateTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuUpdateTaskActionPerformed(evt);
            }
        });
        popTask.add(menuUpdateTask);

        jMenu4.setText("Manage Task");

        jMenuItem6.setText("Suspend Task");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuItem7.setText("Resume Task");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem7);

        jMenuItem10.setText("Abort Task");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        popTask.add(jMenu4);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grid Manager");
        setLocationByPlatform(true);

        taskTree.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        taskTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                taskTreeMouseClicked(evt);
            }
        });
        taskTree.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                taskTreeFocusGained(evt);
            }
        });
        jScrollPane4.setViewportView(taskTree);

        jTabbedPane1.addTab("Tasks", jScrollPane4);

        txtMessages.setColumns(20);
        txtMessages.setEditable(false);
        txtMessages.setRows(5);
        jScrollPane5.setViewportView(txtMessages);

        btnRefreshMsgs.setText("Refresh");
        btnRefreshMsgs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshMsgsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(btnRefreshMsgs, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefreshMsgs)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Messages", jPanel2);

        txtInfo.setColumns(20);
        txtInfo.setEditable(false);
        txtInfo.setRows(5);
        jScrollPane2.setViewportView(txtInfo);

        btnExecute.setText("Send Command");
        btnExecute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteActionPerformed(evt);
            }
        });

        txtCommand.setColumns(20);
        txtCommand.setRows(5);
        txtCommand.setText("<get_host_info/>");
        txtCommand.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCommandKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(txtCommand);

        jTextField2.setEditable(false);
        jTextField2.setText("Client Replies:");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                    .addComponent(btnExecute, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExecute)
                .addGap(78, 78, 78))
        );

        jTabbedPane1.addTab("Commands", jPanel1);

        computerList.setModel(computerListModel);
        computerList.setToolTipText("\"List of Managed Computers\"");
        computerList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                computerListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(computerList);

        newComputer.setText("127.0.0.1");
        newComputer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newComputerActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        txtPort.setText("31416");
        txtPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPortActionPerformed(evt);
            }
        });

        jLabel1.setText("Name/IP");

        jLabel2.setText("Available Computers");

        jLabel3.setText("Port");

        jLabel4.setText("Password");

        txtHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHashActionPerformed(evt);
            }
        });

        jMenu1.setText("Manager");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Quit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Client");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });

        jMenuItem4.setText("Attach to Grid");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed1(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Detach from Grid");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem11.setText("Update Grid");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem11);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F5, 0));
        jMenuItem1.setText("Refresh Task List");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem9.setText("Suspend All Tasks");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem8.setText("Close Client");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem3.setText("About");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem3);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtHash, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAdd))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnClear))
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newComputer, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txtPort, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)))
                    .addComponent(jLabel4))
                .addGap(32, 32, 32)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemove)
                    .addComponent(btnClear))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newComputer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(2, 2, 2)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(txtHash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 493, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        if(txtPort.getText().length() == 0)
        {
            txtPort.setText(grid_manager_utils.DEFAULT_PORT);
        }
        java.lang.String compName = newComputer.getText() + ":"+txtPort.getText();
        if(compName.length() != 0){
            int index = computerList.getSelectedIndex();
            if (index == -1) { //no selection, so insert at beginning
                index = 0;
            } else {           //add after the selected item
                index++;
            }
            computerListModel.insertElementAt(compName, index);
            computerList.setSelectedIndex(index);
            computerList.ensureIndexIsVisible(index);
            btnRemove.setEnabled(true);

            String hash = new String(txtHash.getPassword());
            hostInfos.insertElementAt(new HostInfo(newComputer.getText(),txtPort.getText(),hash),
                    index);
            hash = "";

        }

    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int[] indices = computerList.getSelectedIndices();

        for(int i = 0;i<indices.length;i++)
        {
            int index = indices[i];
            computerListModel.remove(index);
            if(hostInfos.size() > index)
                hostInfos.remove(index);

            int size = computerListModel.getSize();

            if (size == 0) { //Nobody's left, disable firing.
                btnRemove.setEnabled(false);

            } else { //Select an index.
                if (index == computerListModel.getSize()) {
                    //removed item in last position
                    index--;
                }

                computerList.setSelectedIndex(index);
                computerList.ensureIndexIsVisible(index);
            }
            for(int j = i;j<indices.length;j++)
            {
                indices[j] -= 1;
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        computerListModel.clear();
        hostInfos.clear();
    }//GEN-LAST:event_btnClearActionPerformed

    private String getRPCRequest(String input)
    {
        return "<boinc_gui_rpc_request>\n"
                    + input + "\n"
                    + "</boinc_gui_rpc_request>\n\003";
    }

    private String connectToGridNode(String message, grid_manager.HostInfo theHost) throws java.io.IOException
    {
        return connectToGridNode(message, theHost.getHostname(),theHost.getPort());
    }
    private String connectToGridNode(String message,String hostname,String port) throws java.io.IOException
    {
        return doRPC(getRPCRequest(message),hostname,port);
    }

    public String doRPC(String message, String hostname, String port) throws java.io.IOException
    {
        String reply = "";
        if(port.length() == 0)
            port = grid_manager_utils.DEFAULT_PORT;
        
        try{
            int intport = Integer.parseInt(port);
            if(gridNode == null || !gridNode.isConnected()  || gridNode.isClosed())
            {
                gridNode = new java.net.Socket();
            }
            if(!gridNode.isConnected()  || !HostInfo.compare(hostname, gridNode.getInetAddress())
                    || gridNode.getPort() != intport)
            {
                if(!gridNode.isClosed() && gridNode.isConnected())
                    gridNode.close();
                gridNode.connect(new java.net.InetSocketAddress(hostname,intport),
                        1000);
            }

            gridNode.setKeepAlive(true);
            gridNode.setSoTimeout(1000);
            java.io.DataInputStream sock_in = new java.io.DataInputStream(gridNode.getInputStream());
            if(gridNode == null || !gridNode.isConnected() || sock_in == null)
            {
                return "failed to connect to "
                        + hostname + " on port"
                        + port;//TODO add stuff to warn later.
            }

            gridNode.getOutputStream().write(message.getBytes());
            String response;
            while(sock_in != null &&  (response = sock_in.readLine()) != null)
            {
                reply += "\n"+response;
            }
            if(sock_in != null)
                sock_in.close();
        }
        catch(java.io.IOException ioe)
        {
            if(!ioe.getMessage().equals("Read timed out"))
            {
                reply = "ioe failed to connect:"
                        + "\n"
                        + ioe.getMessage();
                throw new java.io.IOException(reply,ioe.getCause());
            }

        }

        return reply;
    }

    private void computerListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_computerListValueChanged
        // TODO add your handling code here:
        //String result = "";
        
    }//GEN-LAST:event_computerListValueChanged

    private void newComputerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newComputerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newComputerActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_jTextField2ActionPerformed

    private void txtCommandKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCommandKeyTyped
        // TODO add your handling code here:
        if((Character.toString(evt.getKeyChar()).equals("\n")) && evt.isControlDown()) {
            executeCommand();
        }
}//GEN-LAST:event_txtCommandKeyTyped

    private void btnExecuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteActionPerformed
        // TODO add your handling code here:
        executeCommand();
}//GEN-LAST:event_btnExecuteActionPerformed

    public double getTotalCredit()
    {
        int totalCredit = 0;
        String totalCreditTag = "host_total_credit";
        java.util.Vector<HostInfo> hosts = getSelectedHosts();
        java.util.Iterator<HostInfo> hosts_it = hosts.iterator();
        HostInfo host;
        java.util.Vector<RPCMap> project_status;
        java.util.Iterator<RPCMap> status_it;
        RPCMap status;
        double dblCredit;
        while(hosts_it.hasNext())
        {
            host = hosts_it.next();
            String project_status_data;
            try {
                project_status_data = connectToGridNode("<get_project_status/>", host);
            } catch (IOException ioe) {
                continue;//this method is not important enough to worry about. Just for fun.
            }
            project_status = RPCMap.parse("project",project_status_data,null);
            if(project_status == null)
                continue;
            status_it = project_status.iterator();
            while(status_it.hasNext())
            {
                status = status_it.next();
                if(status == null)
                    break;
                if(status.containsKey(totalCreditTag))
                {
                    if(status.get(totalCreditTag) != null)
                    {
                        try
                        {
                            dblCredit = Double.parseDouble(status.get(totalCreditTag));
                            totalCredit += dblCredit;
                        }
                        catch(NumberFormatException nfe)
                        {
                            break;
                        }
                    }
                }
            }
        }
        return totalCredit;
    }

    private void refreshTasks()
    {
        java.util.Vector<HostInfo> hosts = getSelectedHosts();
        if(hosts == null || hosts.isEmpty())
        {
            grid_manager_utils.warn(this, "No hosts selected.");
            return;
        }
        java.util.Iterator<HostInfo> host_it = hosts.iterator();
        HostInfo curr;
        String reply;
        java.util.Vector<ResultInfo> results;
        java.util.Iterator<ResultInfo> it;
        java.util.Iterator<String> attributes;
        String attribute;
        ResultInfo result;
        DefaultMutableTreeNode resultNode,attributeNode;
        double totalCredit = getTotalCredit();
        if(totalCredit != 0)
            topTask.setUserObject(grid_manager_utils.GRID_NAME + " (total credit = " + Double.toString(totalCredit) + ")");
        while(host_it.hasNext())
        {
            curr = host_it.next();
            try
            {
                reply = connectToGridNode("<get_results/>",curr);
                results = ResultInfo.parse(reply);
                it = results.iterator();
                while(it.hasNext())
                {
                    result = it.next();
                    if(!result.containsKey("name") || result.get("name") == null
                            || result.get("name").equals(""))
                        continue;
                    java.util.Set<String> keys = result.keySet();
                    attributes = keys.iterator();
                    resultNode = new DefaultMutableTreeNode(result.get("name"));
                    resultNode.add(new DefaultMutableTreeNode("host: "+curr.toString()));
                    while(attributes.hasNext())
                    {
                        attribute = attributes.next();
                        if(attribute != null && !attribute.equals("name"))
                        {
                            attributeNode = new DefaultMutableTreeNode(attribute + ": " +
                                        grid_manager_utils.formatResultData(attribute,
                                        result.get(attribute)));
                            resultNode.add(attributeNode);
                        }
                    }
                    topTask.add(resultNode);
                }
            }
            catch(java.io.IOException ioe)
            {
                txtInfo.setText(txtInfo.getName() + "\nCould not connect to "
                        + curr.getHostname() + " on port " + curr.getPort());
            }
        }
    }

    private void taskTreeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_taskTreeFocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_taskTreeFocusGained

    private java.util.Vector<HostInfo> getSelectedHosts()
    {
        int[] hosts = computerList.getSelectedIndices();
        java.util.Vector<HostInfo> returnMe = null;
        if(hosts.length == 0)
            return returnMe;
        if(hosts.length > hostInfos.size())
        {
            grid_manager_utils.asynchronousWarning(this);
            return returnMe;
        }
        
        returnMe = new Vector<HostInfo>();
        for(int i = 0;i<hosts.length;i++)
        {
            returnMe.add(hostInfos.elementAt(hosts[i]));
        }
        return returnMe;
    }

    private void txtPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPortActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        topTask.removeAllChildren();
        refreshTasks();
        taskTree.updateUI();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        int response = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to quit?",
                "Quit?",javax.swing.JOptionPane.CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
        if(response != javax.swing.JOptionPane.OK_OPTION)
            return;
        this.setVisible(false);
        dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        String aboutMe = "This program manages the client software for the St Jude Computing Grid.\n\n"
                + "Created by David Coss (David.Coss@stjude.org)\n\n"
                + "Version: "
                + getVersion();

        javax.swing.JOptionPane.showMessageDialog(this
                ,aboutMe
                ,"About " + grid_manager_utils.APPNAME,
                    javax.swing.JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        java.util.Vector<HostInfo> hosts = getSelectedHosts();
        if(hosts == null || hosts.isEmpty())
        {
            grid_manager_utils.warn(this,"No host(s) selected.");
            return;
        }

        java.util.Iterator<HostInfo> host_it = hosts.iterator();
        HostInfo host;
        String attachCommand = "<project_detach>\n"
                +"  <project_url>" + grid_manager_utils.PROJECT_URL + "</project_url>\n"
                +"</project_detach>\n";
        String failureString = "Could not attach: ";
        boolean hasFailed = false;
        while(host_it.hasNext())
        {
            host = host_it.next();
            try{
                if(!authenticate(host))
                {
                    failureString += "\n" + host.toString();
                    hasFailed = true;
                    continue;
                }
                txtInfo.setText(txtInfo.getText() + "\n"+connectToGridNode(attachCommand, host));
            }
            catch(java.io.IOException ioe)
            {
                failureString += "\n" + host.toString();
                hasFailed = true;
                continue;
            }
        }
        if(hasFailed)
            grid_manager_utils.warn(this,failureString);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed1
        // TODO add your handling code here:
        java.util.Vector<HostInfo> hosts = getSelectedHosts();
        if(hosts == null || hosts.isEmpty())
        {
            grid_manager_utils.warn(this,"No host(s) selected.");
            return;
        }

        String auth = javax.swing.JOptionPane.showInputDialog(this, "Please enter the authentication key.");
        if(auth.length() == 0)
            return;
        java.util.Iterator<HostInfo> host_it = hosts.iterator();
        HostInfo host;
        String attachCommand = "<project_attach>\n"
                +"  <project_url>" + grid_manager_utils.PROJECT_URL + "</project_url>\n"
                +"  <authenticator>" + auth + "</authenticator>\n"
                +"  <project_name>" + grid_manager_utils.GRID_NAME + " </project_name>\n"
                +"</project_attach>\n";
        String failureString = "Could not attach: ";
        boolean hasFailed = false;
        while(host_it.hasNext())
        {
            host = host_it.next();
            try{
                if(!authenticate(host))
                {
                    failureString += "\n" + host.toString();
                    hasFailed = true;
                    continue;
                }
                txtInfo.setText(txtInfo.getText() + "\n"+connectToGridNode(attachCommand, host));
            }
            catch(java.io.IOException ioe)
            {
                failureString += "\n" + host.toString();
                hasFailed = true;
                continue;
            }
        }
        if(hasFailed)
            grid_manager_utils.warn(this,failureString);
    }//GEN-LAST:event_jMenuItem4ActionPerformed1

    private void menuUpdateTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuUpdateTaskActionPerformed
        // TODO add your handling code here:
        jMenuItem1ActionPerformed(evt);

        popTask.setVisible(false);
    }//GEN-LAST:event_menuUpdateTaskActionPerformed

    private void popTaskComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_popTaskComponentShown
        // TODO add your handling code here:
        popTask.add(jMenuItem3);
        popTask.updateUI();
    }//GEN-LAST:event_popTaskComponentShown

    private void taskTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taskTreeMouseClicked
        // TODO add your handling code here:
        switch(evt.getButton())
        {
            case MouseEvent.BUTTON3:
                {
                    popTask.show(evt.getComponent(), evt.getX(), evt.getY());
                    break;
                }
            case MouseEvent.BUTTON2:
            
                {
                    if(evt.isAltDown() && evt.isControlDown())
                        jPanel1.setVisible(!jPanel1.isVisible());
                    break;
                }
            default:
            {
                if(evt.isControlDown())//for the benefit of mac people.
                {
                    popTask.show(evt.getComponent(), evt.getX(), evt.getY());
                    break;
                }
                if(evt.getClickCount() >= 2)
                {
                    javax.swing.tree.TreePath[] selected = taskTree.getSelectionPaths();
                    if(selected == null || selected.length == 0)
                        return;
                    String value = "";
                    for(int i = 0;i<selected.length;i++)
                    {
                        if(selected[0].getLastPathComponent() != null)
                        {
                            String toAdd = selected[0].getLastPathComponent().toString();
                            if(toAdd.contains(":"))
                            {
                                toAdd = toAdd.substring(toAdd.indexOf(":")+1).trim();
                            }
                            value += toAdd + " ";
                        }
                    }
                    StringSelection toCopy = new StringSelection(value);
                    Clipboard clippy = Toolkit.getDefaultToolkit().getSystemClipboard();
                    clippy.setContents(toCopy, this);
                }
                break;
            }
        }
    }//GEN-LAST:event_taskTreeMouseClicked

    private java.util.Vector getSelectedResults()
    {
        javax.swing.tree.TreePath[] selected = taskTree.getSelectionPaths();
        if(selected.length == 0)
            return null;

        javax.swing.tree.TreePath result;
        String parent = taskTree.getPathForRow(0).toString();
        java.util.Vector returnMe = new java.util.Vector();
        for(int i = 0;i<selected.length;i++)
        {
            result = selected[i];
            if(result == null)
                continue;
            while(result.getParentPath() != null && !result.getParentPath().toString().equals(parent))
                result = result.getParentPath();
            if(result == null)
                continue;
            String name = result.toString().replace("]","");
            parent = parent.replace("]","");
            name = name.replace(parent + ",","").trim();
            java.util.Enumeration results = topTask.children();
            boolean done = false;
            while(results.hasMoreElements() && !done)
            {
                DefaultMutableTreeNode curr = (DefaultMutableTreeNode) results.nextElement();
                if(curr.toString().equals(name))
                {
                    results = curr.children();
                    while(results.hasMoreElements())
                    {
                        curr = (DefaultMutableTreeNode) results.nextElement();
                        if(curr.toString().contains("project_url:"))
                        {
                            name += ":" + curr.toString().replace("project_url:", "").trim();
                        }
                    }
                    returnMe.add(name);
                    done = true;
                }
            }
            
        }
        return returnMe;
    }

    public String getResultOp(String command,String url, String name)
    {
        return "<" + command + ">\n"
        + "   <project_url>" + url + "</project_url>\n"
        +"   <name>" + name + "</name>\n"
        +"</" + command + ">\n";
    }
    
    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        performResultOp("suspend_result");
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        performResultOp("resume_result");
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        java.util.Vector<HostInfo> hosts = getSelectedHosts();
        if(hosts.isEmpty())
        {
            grid_manager_utils.warn(this, "No hosts have been selected.");
            return;
        }
        String plural = "";
        if(hosts.size() > 1)
            plural = "s";
        int shouldContinue = javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to stop all calculations by the client" + plural + "?",
                "Stop computation?",javax.swing.JOptionPane.CANCEL_OPTION,javax.swing.JOptionPane.QUESTION_MESSAGE);
        if(shouldContinue != javax.swing.JOptionPane.OK_OPTION)
            return;

        HostInfo host;
        String response;
        String failureMsg = "Could not quit: ";
        boolean hasFailed = false;
        for(int i = 0;i<hosts.size();i++)
        {
            host = hosts.elementAt(i);
            if(!authenticate(host))
            {
                failureMsg += "\n" + host.toString();
                hasFailed = true;
                continue;
            }
            try{
                response = connectToGridNode("<quit/>", host);
                if(response == null || !response.contains("success"))
                {
                    failureMsg += "\n" + host.toString();
                    hasFailed = true;
                    continue;
                }
            }
            catch(java.io.IOException ioe)
            {
                failureMsg += "\n" + host.toString();
                hasFailed = true;
                continue;
            }
        }
        if(hasFailed)
        {
            grid_manager_utils.warn(this,failureMsg);
        }
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void txtHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHashActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHashActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        String reply;
        HostInfo host = getHostInfo();
        try {
            reply = connectToGridNode("<get_results/>", host);
        } catch (IOException ioe) {
           grid_manager_utils.warn(this, "Could not connect to " + host);
           return;
        }
        java.util.Vector results = ResultInfo.parse(reply);
        java.util.Vector tags = new java.util.Vector();
        for(int i = 0;i<results.size();i++)
        {
            ResultInfo result = (ResultInfo) results.get(i);
            String tag = result.get("name");
            if(result.get("project_url") != null)
                tag +=":" + result.get("project_url");
            tags.add(tag);
        }
        performResultOp(tags,"suspend_result");
        topTask.removeAllChildren();
        refreshTasks();
        taskTree.updateUI();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        java.util.Vector results = getSelectedResults();
        performResultOp(results,"abort_result");
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        // TODO add your handling code here:
        java.util.Vector<HostInfo> hosts = getSelectedHosts();
        if(hosts.isEmpty())
        {
            grid_manager_utils.warn(this,"No hosts selected.");
            return;
        }

        java.util.Iterator<HostInfo> hosts_it = hosts.iterator();
        HostInfo host;
        String updateString,reply;
        updateString = "<project_update>\n"
                + "   <project_url>" + grid_manager_utils.PROJECT_URL + "</project_url>\n"
                + "</project_update>";
        
        while(hosts_it.hasNext())
        {
            host = hosts_it.next();

            try
            {
                if(!authenticate(host))
                    throw new java.io.IOException("Could not authenticate with " + host.toString());
                reply = connectToGridNode(updateString, host);
                txtInfo.setText(txtInfo.getText() + "\n" + reply);
            }
            catch(java.io.IOException ioe)
            {
                txtInfo.setText(txtInfo.getText() + "\nCould not connect update " + host.toString()
                        + "\nReason: " + ioe.getMessage());
            }
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void btnRefreshMsgsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshMsgsActionPerformed
        // TODO add your handling code here:
        java.util.Vector<HostInfo> hosts = getSelectedHosts();
        if(hosts == null || hosts.isEmpty())
        {
            grid_manager_utils.warn(this,"No hosts selected.");
            return;
        }
        txtMessages.setText("");
        java.util.Iterator<HostInfo> hosts_it = hosts.iterator();
        HostInfo host;
        String reply;
        java.util.Vector<RPCMap> msgs;
        java.util.Iterator<RPCMap> msgs_it;
        RPCMap msg;
        while(hosts_it.hasNext())
        {
            host = hosts_it.next();
            try
            {
                reply = connectToGridNode("<get_messages/>", host);
                msgs = RPCMap.parse("msg", reply, null);
                msgs_it = msgs.iterator();
                while(msgs_it.hasNext())
                {
                    msg = msgs_it.next();
                    reply += grid_manager_utils.processMessage(msg) + "\n";
                }
                reply = host.toString() + "\n" + reply;
            }
            catch(java.io.IOException ioe)
            {
                reply = "Could not connect to " + host.toString() + "\n"
                        + "Reason: " + ioe.getMessage();
            }
            txtMessages.setText(txtMessages.getText() + "\n" + reply);
        }
    }//GEN-LAST:event_btnRefreshMsgsActionPerformed

    private void performResultOp(String op)
    {
        java.util.Vector results = getSelectedResults();
        performResultOp(results,op);
    }

    private void performResultOp(java.util.Vector results, String op)
    {
        if(computerList.getSelectedIndex() == -1)
            return;
        HostInfo host = hostInfos.elementAt(computerList.getSelectedIndex());
        if(results == null)
            return;
        if(!authenticate(host))
        {
            grid_manager_utils.warn(this,"Could not authenticate with " + host.toString());
            return;
        }
        for(int i = 0;i<results.size();i++)
        {
            String name_plus_url = (String) results.get(i);
            if(!name_plus_url.contains(":") || name_plus_url.indexOf(":") == name_plus_url.length() -1)
            {
                grid_manager_utils.warn(this,"No url provided for " + name_plus_url);
                continue;
            }
            String url = name_plus_url.substring(name_plus_url.indexOf(":")+1);
            String name = name_plus_url.replace(":" + url,"");
            processCommandOnHosts(getResultOp(op,url,name));
        }
    }

    private void processCommandOnHosts(String command)
    {
        if(command == null || command.length() == 0)
            return;

        Vector<HostInfo> selectedHosts = getSelectedHosts();
        java.util.Iterator<HostInfo> it = selectedHosts.iterator();
        HostInfo curr;
        String serverReply = "";
        while(it.hasNext())
        {
            curr = it.next();
            try{
                serverReply += "\nMessage " +
                        Integer.toString(++messageCounter)
                        + ": " + connectToGridNode(command,curr.getHostname(),curr.getPort());
                
            }
            catch(java.io.IOException ioe)
            {
                serverReply += "\nCould not connect to "
                        + curr.getHostname() + " on port "
                        + curr.getPort() + "\nReason: "
                        + ioe.getMessage();
                continue;
            }
        }
        txtInfo.setText(txtInfo.getText() + "\n" + serverReply);
    }

    private boolean authenticate(grid_manager.HostInfo theHost)
    {
        return authenticate(theHost.getHostname(),theHost.getPort(),theHost.getHash());
    }

    private boolean authenticate(String hostname, String port, String key)
    {
        String auth = "";
        try{
            auth = connectToGridNode("<auth1/>",hostname,port);
            if(!auth.contains("<nonce>") || !auth.contains("</nonce>"))
                throw new java.io.IOException("Unexpected response.");
            int start = auth.indexOf("<nonce>") + 7;
            int end = auth.indexOf("</nonce>");
            auth = auth.substring(start,end);
            String nonce_hash = grid_manager_utils.getGuiRPCAuthHash(auth, key);
            auth = connectToGridNode("<auth2>\n"
                    + "<nonce_hash>"
                    + nonce_hash + "</nonce_hash>\n"
                    + "</auth2>",hostname,port);
            txtInfo.setText(auth);
            return auth.contains("<authorized/>");
        }
        catch(java.io.IOException ioe)
        {
            txtInfo.setText(ioe.getMessage() + "\n" + auth);
        }
        return false;
    }

    private grid_manager.HostInfo getHostInfo()
    {
        int selected = computerList.getSelectedIndex();
        if(selected >= hostInfos.size())
        {
            grid_manager_utils.asynchronousWarning(this);
            return null;
        }
        return hostInfos.get(selected);
    }

    private void executeCommand()
    {
        String command = txtCommand.getText();
        if(command.contains("<auth/>"))
        {
            HostInfo hostInfo = getHostInfo();
            if(hostInfo == null)
                return;
            if(authenticate(hostInfo))
                txtInfo.setText(txtInfo.getText() + "\nAuthenticated with " + hostInfo.toString());
            else
                txtInfo.setText(txtInfo.getText() + "\nCould not authenticate with " + hostInfo.toString());
            return;
        }
        processCommandOnHosts(command);
    }


    private static void parseArgs(String args[])
    {
        String curr;
        for(int i = 0;i<args.length;i++)
        {
            curr = args[i].toLowerCase();
            if(curr.equals("--version") || curr.equals("-v"))
            {
                System.out.println(GridManagerUI.getVersion());
                System.exit(0);
            }
        }
    }


    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {

        if(args.length != 0)
        {
            parseArgs(args);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GridManagerUI theGUI = new GridManagerUI();
                theGUI.setVisible(true);
                if(theGUI.gridNode != null && theGUI.gridNode.isConnected())
                {
                    try {
                        theGUI.gridNode.close();
                    } catch (IOException ioe) {
                        Logger.getLogger(GridManagerUI.class.getName()).log(Level.SEVERE, null, ioe);
                    }
                }
            }
        });
    }

  
    private javax.swing.DefaultListModel computerListModel;
    private java.net.Socket gridNode;
    private int messageCounter;
    private java.util.Vector<grid_manager.HostInfo> hostInfos;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExecute;
    private javax.swing.JButton btnRefreshMsgs;
    private javax.swing.JToggleButton btnRemove;
    private javax.swing.JList computerList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JMenuItem menuUpdateTask;
    private javax.swing.JTextField newComputer;
    private javax.swing.JPopupMenu popTask;
    private javax.swing.tree.DefaultMutableTreeNode topTask;
    private javax.swing.JTree taskTree;
    private javax.swing.JTextArea txtCommand;
    private javax.swing.JPasswordField txtHash;
    private javax.swing.JTextArea txtInfo;
    private javax.swing.JTextArea txtMessages;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

}
